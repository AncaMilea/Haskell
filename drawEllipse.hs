-- Exercise 11
-- You are asked to generate a list of rectangles giving an image of an ellipse. The ellipse is defined by the
-- floating point input parameters xCentre yCentre a b and has a boundary logically consisting of those realvalued
-- points (x,y) satisfying the equation (x – xCentre)2/ a2 + (y – yCentre)2/ b2 = 1. In practice, not all such
-- points can be represented computationally. The image generated by these rectangles should contain the
-- (integer) coordinates of all points on or within the given ellipse. It is also expected that the list by the
-- drawEllipse function is a minimal one in the sense defined in the previous exercise.

data Rectangle = Rectangle (Int, Int) (Int, Int) deriving (Eq, Show)
drawEllipse :: Float -> Float -> Float -> Float -> [Rectangle]
drawEllipse x y a b = calcTup x y a b 

calcTup :: Float -> Float -> Float -> Float -> [Rectangle]
calcTup x y a b= [Rectangle(x1,y1) (x2,y2) |x1<-interv1,y1<-interv2, x2<-interv1,y2<-interv2, ((((fromIntegral(x1) - x)^2)/(a^2)) + (((fromIntegral(y1) - y)^2)/(b^2)))<=1 && ((((fromIntegral(x2) - x)^2)/(a^2)) + (((fromIntegral(y2) - y)^2)/(b^2)))<=1 && ((((fromIntegral(x1) - x)^2)/(a^2)) + (((fromIntegral(y2) - y)^2)/(b^2)))<=1 && ((((fromIntegral(x2) - x)^2)/(a^2)) + (((fromIntegral(y1) - y)^2)/(b^2)))<=1]
                     where 
                        interv1 = [(ceiling(x-a)) .. (floor(x+a))]
                        interv2 = [(ceiling(y-b)) .. (floor(y+b))]


